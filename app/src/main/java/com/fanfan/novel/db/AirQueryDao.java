package com.fanfan.novel.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fanfan.novel.model.AirQuery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AIR_QUERY".
*/
public class AirQueryDao extends AbstractDao<AirQuery, Long> {

    public static final String TABLENAME = "AIR_QUERY";

    /**
     * Properties of entity AirQuery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AirName = new Property(1, String.class, "airName", false, "AIR_NAME");
        public final static Property AirPlanTime = new Property(2, String.class, "airPlanTime", false, "AIR_PLAN_TIME");
        public final static Property AirActualTime = new Property(3, String.class, "airActualTime", false, "AIR_ACTUAL_TIME");
        public final static Property AirStart = new Property(4, String.class, "airStart", false, "AIR_START");
        public final static Property AirPlanArriveTime = new Property(5, String.class, "airPlanArriveTime", false, "AIR_PLAN_ARRIVE_TIME");
        public final static Property AirArrive = new Property(6, String.class, "airArrive", false, "AIR_ARRIVE");
        public final static Property AirOnTime = new Property(7, String.class, "airOnTime", false, "AIR_ON_TIME");
        public final static Property AirStatus = new Property(8, String.class, "airStatus", false, "AIR_STATUS");
    }


    public AirQueryDao(DaoConfig config) {
        super(config);
    }
    
    public AirQueryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AIR_QUERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AIR_NAME\" TEXT," + // 1: airName
                "\"AIR_PLAN_TIME\" TEXT," + // 2: airPlanTime
                "\"AIR_ACTUAL_TIME\" TEXT," + // 3: airActualTime
                "\"AIR_START\" TEXT," + // 4: airStart
                "\"AIR_PLAN_ARRIVE_TIME\" TEXT," + // 5: airPlanArriveTime
                "\"AIR_ARRIVE\" TEXT," + // 6: airArrive
                "\"AIR_ON_TIME\" TEXT," + // 7: airOnTime
                "\"AIR_STATUS\" TEXT);"); // 8: airStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AIR_QUERY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AirQuery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String airName = entity.getAirName();
        if (airName != null) {
            stmt.bindString(2, airName);
        }
 
        String airPlanTime = entity.getAirPlanTime();
        if (airPlanTime != null) {
            stmt.bindString(3, airPlanTime);
        }
 
        String airActualTime = entity.getAirActualTime();
        if (airActualTime != null) {
            stmt.bindString(4, airActualTime);
        }
 
        String airStart = entity.getAirStart();
        if (airStart != null) {
            stmt.bindString(5, airStart);
        }
 
        String airPlanArriveTime = entity.getAirPlanArriveTime();
        if (airPlanArriveTime != null) {
            stmt.bindString(6, airPlanArriveTime);
        }
 
        String airArrive = entity.getAirArrive();
        if (airArrive != null) {
            stmt.bindString(7, airArrive);
        }
 
        String airOnTime = entity.getAirOnTime();
        if (airOnTime != null) {
            stmt.bindString(8, airOnTime);
        }
 
        String airStatus = entity.getAirStatus();
        if (airStatus != null) {
            stmt.bindString(9, airStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AirQuery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String airName = entity.getAirName();
        if (airName != null) {
            stmt.bindString(2, airName);
        }
 
        String airPlanTime = entity.getAirPlanTime();
        if (airPlanTime != null) {
            stmt.bindString(3, airPlanTime);
        }
 
        String airActualTime = entity.getAirActualTime();
        if (airActualTime != null) {
            stmt.bindString(4, airActualTime);
        }
 
        String airStart = entity.getAirStart();
        if (airStart != null) {
            stmt.bindString(5, airStart);
        }
 
        String airPlanArriveTime = entity.getAirPlanArriveTime();
        if (airPlanArriveTime != null) {
            stmt.bindString(6, airPlanArriveTime);
        }
 
        String airArrive = entity.getAirArrive();
        if (airArrive != null) {
            stmt.bindString(7, airArrive);
        }
 
        String airOnTime = entity.getAirOnTime();
        if (airOnTime != null) {
            stmt.bindString(8, airOnTime);
        }
 
        String airStatus = entity.getAirStatus();
        if (airStatus != null) {
            stmt.bindString(9, airStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AirQuery readEntity(Cursor cursor, int offset) {
        AirQuery entity = new AirQuery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // airName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // airPlanTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // airActualTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // airStart
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // airPlanArriveTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // airArrive
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // airOnTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // airStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AirQuery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAirName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAirPlanTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAirActualTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAirStart(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAirPlanArriveTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAirArrive(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAirOnTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAirStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AirQuery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AirQuery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AirQuery entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
